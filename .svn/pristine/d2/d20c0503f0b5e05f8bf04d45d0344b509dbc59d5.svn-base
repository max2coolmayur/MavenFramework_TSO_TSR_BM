package org.gs4tr.qa.utility;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

public class BrowserFactory {
	private static BrowserFactory testSystem;	
	public static WebDriver driver;
	public static synchronized BrowserFactory SystemEngine() {
		try {
			if (testSystem.equals(null)) {
				testSystem = new BrowserFactory();
			}
		} catch (Exception NOSYSTEM) {
			testSystem = new BrowserFactory();
		}
		return testSystem;
	}
	
	
	
	public  WebDriver startApplication(WebDriver driver, String browserName, String url)
	{
		
		
		try {
			if(browserName.equals("Chrome"))
			{
				System.setProperty("webdriver.chrome.driver", "./Drivers/ChromeDriver.exe");
				driver=new ChromeDriver();
				driver.manage().timeouts().pageLoadTimeout(90, TimeUnit.SECONDS);
				
			}
			else if(browserName.equals("Firefox"))
			{
				System.setProperty("webdriver.gecko.driver", "./Drivers/geckodriver.exe");
				driver=new FirefoxDriver();
				driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
			}
			else if(browserName.equals("IE"))
			{
				System.setProperty("webdriver.ie.driver", "./Drivers/IEDriverServer.exe");
				driver=new InternetExplorerDriver();
				driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
			}
			else if(browserName.equals("Edge"))
			{
				System.setProperty("webdriver.edge.driver", "./Drivers/MicrosoftWebDriver.exe");
				driver=new EdgeDriver();
				driver.manage().timeouts().pageLoadTimeout(40, TimeUnit.SECONDS);
			}
			else
			{
				System.out.println("We do not support "+browserName+" browser yet");
			}
			
			driver.manage().window().maximize();
			driver.get(url);
			driver.manage().timeouts().implicitlyWait(40, TimeUnit.SECONDS);
			
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return driver;	
	}
	
	public static void quitBrowser(WebDriver driver)
	{
		driver.quit();
	}
	/**
	 *  Finds an element using driver object
	 *  
	 * @param locator
	 * @return WebElement
	 */
	public WebElement findElement(String locator)
	{
		return driver.findElement(By.xpath(locator));
	}
	
	public WebElement findElementByName(String locator)
	{
		return driver.findElement(By.name(locator));
	}

	/**To be used instead of Thread.sleep(). 
	 * 
	 */
	public void explicitWait(long time, String locator)
	{
		WebDriverWait wait = new WebDriverWait(driver,time);
		wait.until(ExpectedConditions.visibilityOf(findElement(locator)));
	}
	
	@SuppressWarnings("unused")
	private Properties getLocatorService(String filename) {
		Properties locator = new Properties();
		try {
			locator.load(new FileInputStream(new File(filename + ".properties")
					.getAbsolutePath()));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return locator;
	}
	
	/**
	 * Used to write verify messages to log
 * 	@param command
 * @param element
 * @param expectedValue
 * @param result
 */
	public void writeVerifyToLog(String command,String element,String expectedValue,String result)
	{
	((JavascriptExecutor)BrowserFactory.driver).executeScript("type=\""+"Verify|"+command+"|"+element+"|"+expectedValue+"|"+result+"|\"");
	}
	
	
	
	public static boolean verifyElementPresent(String tagName, int second)
			throws Exception {
		boolean result = false;
		try{
			WebDriverWait wait = new WebDriverWait(BrowserFactory.driver,second);
			if(tagName.indexOf("/")!=0)
			{
				System.out.println("//");
				wait.until(ExpectedConditions.visibilityOfElementLocated(By.name(tagName)));
			}
			else
			{
				wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(tagName)));
			}
			result=true;
		}
		catch(Exception e)
		{
			System.err.print(e);
			//throw new Exception(e);
		}
		return result;
	}

	
	
	
	
	
	
	
}
